#pragma kernel WorleyNoise

RWTexture3D<float4> Result;

RWStructuredBuffer<float3> FeaturePoints;

int FeatPointBufferSize;

// returns the distance between two 3D points
float distance(float3 A, float3 B)
{
    return sqrt(pow(B.x - A.x, 2) + pow(B.y - A.y, 2) + pow(B.z - A.z, 2));
}

[numthreads(8,8,8)]
void WorleyNoise (uint3 id : SV_DispatchThreadID)
{

    // save the position of the current point
    float3 myPos = float3(id.x, id.y, id.z);

    // iterate over all the existing featurePoints and find the one that is closest
    float3 closestfeaturePoint = FeaturePoints[0];

    // get the distance to the feature point
    float bestDistance = distance(closestfeaturePoint, myPos);

    for (int i = 0; i < FeatPointBufferSize; i++)
    {
        for (int j = 0; j < FeatPointBufferSize; j++)
        {
            for (int k = 0; k < FeatPointBufferSize; k++)
            {
                float currPosInBuffer = i * FeatPointBufferSize * FeatPointBufferSize + FeatPointBufferSize * j + k;
                float3 offset = FeaturePoints[currPosInBuffer];
                float3 currPos = offset + float3(i,j,k);
                currPos = currPos * 8;

                float dist = distance(myPos, currPos);
                if (bestDistance > dist)
                    bestDistance = dist;
            }
        }
    }

    /*for (int i = 0; i < FeatPointBufferSize; i++)
    {
        float dist = distance(myPos, FeaturePoints[i]);
       // if (bestDistance > dist)
         //   bestDistance = dist;
    }*/

    // get the highest possible distance between a feature point and a point
    float highestDistance = sqrt(64+64+64);
    bestDistance = bestDistance / highestDistance;
    Result[id.xyz] = float4(bestDistance, bestDistance, bestDistance, bestDistance);
}